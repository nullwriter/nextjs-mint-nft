// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts@5.0.1/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@5.0.1/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts@5.0.1/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts@5.0.1/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

// Import the IERC20 interface
import "@openzeppelin/contracts@5.0.1/token/ERC20/IERC20.sol";

contract DeCTB is ERC721, ERC721Enumerable, ERC721Pausable, Ownable {
    uint256 private _nextTokenId;
    uint256 public MINT_PRICE = 0.05 ether;
    uint256 public MINT_PRICE_BUSD = 5;
    uint256 public MAX_SUPPLY = 16;
    // BUSD contract address on BSC test
    address public constant BUSD_CONTRACT_ADDRESS = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee; 

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;

    constructor(address initialOwner)
        ERC721("DeCTB", "TCBT")
        Ownable(initialOwner)
    {
        _tokenIdCounter.increment();
    }

    function widthdraw() public onlyOwner {
        require(address(this).balance > 0, "No funds to widthdraw");
        payable(owner()).transfer(address(this).balance);
    }

    function _baseURI() internal pure override returns (string memory) {
        return "ipfs://QmZ5a5oWiXqXxp19yXsKAzG7Zfa35YoPKwtr6yJ8nZtyEv/";
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function safeMint(address to) public payable {
        require(totalSupply() < MAX_SUPPLY, "No more can be minted");
        require(msg.value >= MINT_PRICE, "Not enough BNB to buy");
        
        // Use the Counter to ensure that token IDs are tracked properly
        _tokenIdCounter.increment();
        uint256 tokenId = _tokenIdCounter.current();
        
        _safeMint(to, tokenId);
    }

    function safeMintWithBUSD(address to, uint256 amountBUSD) public {
        require(totalSupply() < MAX_SUPPLY, "No more can be minted");
        require(amountBUSD >= MINT_PRICE_BUSD, "Not enough BUSD to buy");

        // Transfer BUSD from the sender to this contract
        IERC20(BUSD_CONTRACT_ADDRESS).transferFrom(msg.sender, address(this), amountBUSD);

        // Proceed with minting
        _tokenIdCounter.increment();
        uint256 tokenId = _tokenIdCounter.current();
        
        _safeMint(to, tokenId);
    }

    // The following functions are overrides required by Solidity.

    function _update(address to, uint256 tokenId, address auth)
        internal
        override(ERC721, ERC721Enumerable, ERC721Pausable)
        returns (address)
    {
        return super._update(to, tokenId, auth);
    }

    function _increaseBalance(address account, uint128 value)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._increaseBalance(account, value);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function tokensOfOwner(address owner) external view returns(uint256[] memory) {
        uint256 tokenCount = balanceOf(owner);
        if (tokenCount == 0) {
            return new uint256[](0);
        } else {
            uint256[] memory result = new uint256[](tokenCount);
            for (uint256 index = 0; index < tokenCount; index++) {
                result[index] = tokenOfOwnerByIndex(owner, index);
            }
            return result;
        }
    }
}